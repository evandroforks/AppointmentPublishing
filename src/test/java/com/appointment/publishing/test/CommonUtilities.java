package com.appointment.publishing.test;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultActions;

import static org.hamcrest.Matchers.hasSize;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

public class CommonUtilities {

  /**
   * Get the latest/updated id of the database item.
   *
   * <p>When the database is updated and reset, the internal autogenerated IDs are not reset,
   * therefore, it is required to run additional request to the server to know which one is the
   * latest/updated id value of the existent item for testing it.
   *
   * @see <a href="https://stackoverflow.com/questions/19470700/">Reset JPA generated value between
   *     tests</a>.
   * @return the id as an Long
   * @param mockMvc an object to extract the id from
   * @param endPoint
   */
  public static Long getId(MockMvc mockMvc, String endPoint) throws Exception {
    ResultActions mvcActions = mockMvc.perform(get(endPoint));
    MvcResult mvcResult = mvcActions.andReturn();
    MockHttpServletResponse response = mvcResult.getResponse();

    mvcActions.andExpect(status().isOk()).andExpect(jsonPath("$.content", hasSize(1)));
    String contentAsString = response.getContentAsString();

    // Convert String objects to JSON
    JsonNode responseJson = new ObjectMapper().readTree(contentAsString);
    return responseJson.get("content").get(0).get("id").asLong();
  }
}
